{
  "_from": "electron-builder",
  "_id": "electron-builder@21.2.0",
  "_inBundle": false,
  "_integrity": "sha512-x8EXrqFbAb2L3N22YlGar3dGh8vwptbB3ovo3OF6K7NTpcsmM2zEoJv7GhFyX73rNzSG2HaWpXwGAtOp2JWiEw==",
  "_location": "/electron-builder",
  "_phantomChildren": {
    "decamelize": "1.2.0",
    "emoji-regex": "7.0.3",
    "get-caller-file": "2.0.5",
    "graceful-fs": "4.2.3",
    "jsonfile": "4.0.0",
    "p-limit": "2.2.1",
    "path-exists": "3.0.0",
    "require-directory": "2.1.1",
    "require-main-filename": "2.0.0",
    "set-blocking": "2.0.0",
    "universalify": "0.1.2",
    "which-module": "2.0.0",
    "wrap-ansi": "5.1.0",
    "y18n": "4.0.0"
  },
  "_requested": {
    "escapedName": "electron-builder",
    "fetchSpec": "latest",
    "name": "electron-builder",
    "raw": "electron-builder",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/electron-builder/-/electron-builder-21.2.0.tgz",
  "_shasum": "b68ec4def713fc0b8602654ce842f972432f50c5",
  "_shrinkwrap": null,
  "_spec": "electron-builder",
  "_where": "/home/bruno/Desktop/Projects/appdock-me/electron",
  "author": {
    "name": "Vladimir Krivosheev"
  },
  "bin": {
    "electron-builder": "./out/cli/cli.js",
    "install-app-deps": "./out/cli/install-app-deps.js"
  },
  "bugs": {
    "url": "https://github.com/electron-userland/electron-builder/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Stefan Judis"
    }
  ],
  "dependencies": {
    "app-builder-lib": "21.2.0",
    "bluebird-lst": "^1.0.9",
    "builder-util": "21.2.0",
    "builder-util-runtime": "8.3.0",
    "chalk": "^2.4.2",
    "dmg-builder": "21.2.0",
    "fs-extra": "^8.1.0",
    "is-ci": "^2.0.0",
    "lazy-val": "^1.0.4",
    "read-config-file": "5.0.0",
    "sanitize-filename": "^1.6.2",
    "update-notifier": "^3.0.1",
    "yargs": "^13.3.0"
  },
  "deprecated": false,
  "description": "A complete solution to package and build a ready for distribution Electron app for MacOS, Windows and Linux with “auto update” support out of the box",
  "devDependencies": {},
  "engines": {
    "node": ">=8.12.0"
  },
  "files": [
    "out"
  ],
  "homepage": "https://github.com/electron-userland/electron-builder",
  "keywords": [
    "Mac",
    "MacOS",
    "OS X",
    "Windows",
    "app",
    "appx",
    "build",
    "builder",
    "dmg",
    "electron",
    "exe",
    "install",
    "installer",
    "msi",
    "nsis",
    "pack",
    "packager",
    "pkg",
    "portable",
    "setup",
    "snap"
  ],
  "license": "MIT",
  "main": "out/index.js",
  "name": "electron-builder",
  "optionalDependencies": {},
  "publishConfig": {
    "tag": "next"
  },
  "readme": "# electron-builder [![npm version](https://img.shields.io/npm/v/electron-builder.svg?label=latest)](https://yarn.pm/electron-builder) [![downloads per month](https://img.shields.io/npm/dm/electron-builder.svg)](https://yarn.pm/electron-builder) [![donate](https://img.shields.io/badge/donate-donorbox-green.svg)](https://www.electron.build/donate) [![project chat](https://img.shields.io/badge/chat-on_zulip-brightgreen.svg)](https://electron-builder.zulipchat.com)\r\nA complete solution to package and build a ready for distribution [Electron](https://electronjs.org), [Proton Native](https://proton-native.js.org/) app for macOS, Windows and Linux with “auto update” support out of the box.\r\n\r\nSee documentation on [electron.build](https://www.electron.build).\r\n\r\n* NPM packages management:\r\n    * [Native application dependencies](https://electron.atom.io/docs/tutorial/using-native-node-modules/) compilation (including [Yarn](http://yarnpkg.com/) support).\r\n    * Development dependencies are never included. You don't need to ignore them explicitly.\r\n    * [Two package.json structure](https://www.electron.build/tutorials/two-package-structure) is supported, but you are not forced to use it even if you have native production dependencies.\r\n* [Code Signing](https://www.electron.build/code-signing) on a CI server or development machine.\r\n* [Auto Update](https://www.electron.build/auto-update) ready application packaging.\r\n* Numerous target formats:\r\n    * All platforms: `7z`, `zip`, `tar.xz`, `tar.7z`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir` (unpacked directory).\r\n    * [macOS](https://www.electron.build/configuration/mac): `dmg`, `pkg`, `mas`.\r\n    * [Linux](https://www.electron.build/configuration/linux): [AppImage](http://appimage.org), [snap](http://snapcraft.io), debian package (`deb`), `rpm`, `freebsd`, `pacman`, `p5p`, `apk`.\r\n    * [Windows](https://www.electron.build/configuration/win): `nsis` (Installer), `nsis-web` (Web installer), `portable` (portable app without installation), AppX (Windows Store), MSI, Squirrel.Windows.\r\n* [Publishing artifacts](https://www.electron.build/configuration/publish) to GitHub Releases, Amazon S3, DigitalOcean Spaces and Bintray.\r\n* Advanced building:\r\n    * Pack in a distributable format [already packaged app](https://www.electron.build/#pack-only-in-a-distributable-format).\r\n    * Separate [build steps](https://github.com/electron-userland/electron-builder/issues/1102#issuecomment-271845854).\r\n    * Build and publish in parallel, using hard links on CI server to reduce IO and disk space usage.\r\n    * [electron-compile](https://github.com/electron/electron-compile) support (compile for release-time on the fly on build).\r\n* [Docker](https://www.electron.build/multi-platform-build#docker) images to build Electron app for Linux or Windows on any platform.\r\n* [Proton Native](https://www.electron.build/configuration/configuration/#proton-native) support.\r\n* Downloads all required tools files on demand automatically (e.g. to code sign windows application, to make AppX), no need to setup.\r\n\r\n| Question | Answer |\r\n|----------|-------|\r\n| “I want to configure electron-builder” | [See options](https://electron.build/configuration/configuration) |\r\n| “I have a question” | [Open an issue](https://github.com/electron-userland/electron-builder/issues) or [join the chat](https://electron-builder.zulipchat.com/) |\r\n| “I found a bug” | [Open an issue](https://github.com/electron-userland/electron-builder/issues/new) |\r\n| “I want to support development” | [Donate](https://www.electron.build/donate) |\r\n\r\n## Installation\r\n[Yarn](http://yarnpkg.com/) is [strongly](https://github.com/electron-userland/electron-builder/issues/1147#issuecomment-276284477) recommended instead of npm.\r\n\r\n`yarn add electron-builder --dev`\r\n\r\n## Quick Setup Guide\r\n\r\n[electron-webpack-quick-start](https://github.com/electron-userland/electron-webpack-quick-start) is a recommended way to create a new Electron application. See [Boilerplates](https://www.electron.build/#boilerplates).\r\n\r\n1. Specify the standard fields in the application `package.json` — [name](https://electron.build/configuration/configuration#Metadata-name), `description`, `version` and [author](https://docs.npmjs.com/files/package.json#people-fields-author-contributors).\r\n\r\n2. Specify the [build](https://electron.build/configuration/configuration#build) configuration in the `package.json` as follows:\r\n    ```json\r\n    \"build\": {\r\n      \"appId\": \"your.id\",\r\n      \"mac\": {\r\n        \"category\": \"your.app.category.type\"\r\n      }\r\n    }\r\n    ```\r\n   See [all options](https://www.electron.build/configuration/configuration). Option [files](https://www.electron.build/configuration/contents#files) to indicate which files should be packed in the final application, including the entry file, maybe required.\r\n\r\n3. Add [icons](https://www.electron.build/icons).\r\n\r\n4. Add the [scripts](https://docs.npmjs.com/cli/run-script) key to the development `package.json`:\r\n    ```json\r\n    \"scripts\": {\r\n      \"pack\": \"electron-builder --dir\",\r\n      \"dist\": \"electron-builder\"\r\n    }\r\n    ```\r\n    Then you can run `yarn dist` (to package in a distributable format (e.g. dmg, windows installer, deb package)) or `yarn pack` (only generates the package directory without really packaging it. This is useful for testing purposes).\r\n\r\n    To ensure your native dependencies are always matched electron version, simply add script `\"postinstall\": \"electron-builder install-app-deps\"` to your `package.json`.\r\n\r\n5. If you have native addons of your own that are part of the application (not as a dependency), set [nodeGypRebuild](https://www.electron.build/configuration/configuration#Configuration-nodeGypRebuild) to `true`.\r\n\r\nPlease note that everything is packaged into an asar archive [by default](https://electron.build/configuration/configuration#Configuration-asar).\r\n\r\nFor an app that will be shipped to production, you should sign your application. See [Where to buy code signing certificates](https://www.electron.build/code-signing#where-to-buy-code-signing-certificate).\r\n\r\n## Donate\r\n\r\nWe do this open source work in our free time. If you'd like us to invest more time on it, please [donate](https://www.electron.build/donate). Donation can be used to increase some issue priority.\r\n\r\n## Sponsors\r\n\r\n<a href=\"https://workflowy.com\"><img src=\"https://workflowy.com/media/i/icon-28x28.png\" alt=\"WorkFlowy\" title=\"WorkFlowy\" width=\"28\" height=\"28\" align=\"middle\"/></a>\r\n<a href=\"https://tidepool.org\"><img src=\"https://www.electron.build/sponsor-logos/Tidepool_Logo_Light.svg\" alt=\"Tidepool\" title=\"Tidepool\" align=\"middle\"/></a>\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/electron-userland/electron-builder.git"
  },
  "typings": "./out/index.d.ts",
  "version": "21.2.0"
}
